The core functionality of this project is broken out into 3 npm modules:

- [jsonapi-schema](#jsonapi-schema)
- [jsonapi-express](#jsonapi-express)
- [jsonapi-knex](#jsonapi-knex)

# <a name="jsonapi-schema"></a>`jsonapi-schema`
---

This module has two responsibilities:

- Loading schema json files from a local file system and serializing them to a json object.

It handles both pod style `app/article/schema.json` and legacy style `app/schemas/article.json` paths, and while intended for use with ember-jsonapi, is framework agnostic.

- Generating a parser capable of handling simply formatted data and decorating with JSON API structure.

A simple example of how to use this module is as follows:

```javascript
var path = require('path');
var schema = require('jsonapi-schema');
var schemas = schema.loadSchemas(path.join(process.cwd(), 'app'));

var toJSONAPI = JSONAPI(schemas, '/api');
var toArticle = toJSONAPI('article');

var response = toArticle({
  id: 1,
  title: 'JSON API Paints my bikeshed'
}, {
  included: {
    comments: [
      { id: 5, body: 'First!' }
    ]
  }
})
```

In the above example, response would be serialized to the following:

```
{
  "links": {
    "self": "/api/articles"
  },
  "data": [{
    "type": "articles",
    "id": 1,
    "attributes": {
      "title": "JSON API paints my bikeshed!"
    },
    "relationships": {
      "comments": {
        "links": {
          "self": "/api/articles/1/relationships/comments",
          "related": "/api/articles/1/comments"
        },
        "data": [
          { "type": "comments", "id": 5 }
        ]
      }
    },
    "links": {
      "self": "/api/articles/1"
    }
  }],
  "included": [{
    "type": "comments",
    "id": 5,
    "attributes": {
      "body": "First!"
    },
    "links": {
      "self": "/api/comments/5"
    }
  }]
}
```

The intent of `jsonapi-schema` is not necessarily to be used in an isolated context, but to provide a simple way of ingesting common relational database responses and serializing them to JSON API documents with as little manipulation as possible.

# <a name="jsonapi-express"></a> `jsonapi-express`
---

This module is an express middleware that is generated by passing schemas to it. When called with a schemas object (as generated by `jsonapi-schema` above), it will automatically create endpoints for the passed objects. For instance, building on the above example, you could load your schemas and call it like so:

```javascript
var JSONAPI = require('jsonapi-express');
var schema = require('jsonapi-schema');
var path = require('path');
var schemas = schema.loadSchemas(path.join(process.cwd(), 'app'));

var operations = {}; // more on operations below

app.use('/api', JSONAPI(operations, schemas, '/api'));
```

The above, when passed our article schema, would create the following endpoints, mapped to the operations in parentheses:

```
GET    /api/articles        (findAll)
GET    /api/articles/:id    (findOne)
POST   /api/articles        (create)
PATCH  /api/articles/:id    (update)
DELETE /api/articles/:id    (delete)
GET    /api/articles/:id/comments                (findOne or findAll, depending on relationship type)
GET    /api/articles/:id/relationships/comments  (findAll)
POST   /api/articles/:id/relationships/comments  (updateRelationship)
PATCH  /api/articles/:id/relationships/comments  (updateRelationship)
DELETE /api/articles/:id/relationships/comments  (updateRelationship)
```

`jsonapi-express` handles setting the correct headers, returning the correct error codes, and aims to be a common module that can track against the JSON API spec without having to manually update resource routes in your application.

To function though, `jsonapi-express` requires an operations object to be passed in, with any of the following operations defined:

- `findAll`: a function for finding records
- `findOne`: a function for finding a single record
- `create`:  a function for creating a record
- `update`:  a function for creating a record
- `delete`:  a function for deleting a record
- `updateRelationship`: a function for updating the relationship between two records

In addition, the following optional operations can be passed in:

- `transforms`: a hash of `[schema name] : [function]` pairs, which is called whenever this record is fetched from the db, before it is parsed by `jsonapi-schema`. This is useful for modifying data without having to specify an if statement inside of a query operation.
- `authorize`: an express middleware that is expected to either call `next` if the user is allowed to access `req.url`, or send a `4xx` if not.

For ORM use, you can add global operations at the root. If you would like to override operations per-model (or not provide base operations), you can pass in an object with the name of the model to your operations, e.g. `operations.article.create` could be a function specifically for creating an article.

If you provide neither a model-level operation or a base-level operation, the route that is unmatched will just call `next()`, handing control of the request back to your application routes.

# <a name="jsonapi-knex"></a> `jsonapi-knex`
---

The final piece of `ember-jsonapi` is a preconfigured operations hash. `jsonapi-knex` exports a function that will generate an operations object so you don't have to write your own database queries. It uses [knex.js](http://knexjs.org/) to build sql queries, and as such is compatible with Postgres, MSSQL, MySQL, MariaDB, SQLite3, and Oracle.

It is fairly opinionated in the way it requests data, with the only configuration options being the database, schemas, and the option of specifying table names that differ from schema names. It is meant to be a base to build on rather than a comprehensive ORM.

To tie all three together (which is what the `api` blueprint does), you'd do the following:

```javascript
var JSONAPI = require('jsonapi-express');
var schema = require('jsonapi-schema');
var path = require('path');
var schemas = schema.loadSchemas(path.join(process.cwd(), 'app'));
var db = require('../lib/db');
var JSONAPIOperations = require('jsonapi-knex')(db, schemas);

// add your transforms or modify operations here

app.use('/api', JSONAPI(JSONAPIOperations, schemas, '/api'));
```

The `lib/db.js` file just uses the `knexfile.js` (a knex convention) to load your database config, like so:

```javascript
var configs = require('../../knexfile.js')
var env = process.env.NODE_ENV || 'development'
var config = configs[env]
if (!config) throw new Error(`No db config defined for environment ${env}`)
module.exports = require('knex')(config)
```

If an operation needs to do something special, you can override the operation using standard javascript patterns, e.g.

```javascript
var JSONAPIOperations = require('jsonapi-knex')(db, schemas);

var findAll = JSONAPIOperations.findAll;
JSONAPIOperations.findAll = function(type) {
  if (type === 'special-case') return fetchSpecial.apply(this, arguments);
  return findAll.apply(this, arguments);
}
```
