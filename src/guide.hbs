#### Setup

To build an ember application with `ember-jsonapi`, you'd start with an ember application, either an existing one or one generated with `ember init [appname]`.

Then, install this addon and initialize the api:

```
ember install ember-jsonapi
ember generate api
```

This sets up a `server` folder, which contains a small express server that will be run alongside your client side application when running `ember serve`.

In addition, this will add a `knexfile.js`, which is used to configure your database connection.

The default `knexfile.js` just uses a sqlite database called `dev.sqlite3` in the root of our application. If you'd like to connect to a different database, you can modify `knexfile.js`.

#### Adding an api endpoint

API endpoints are automatically created based on the existence of schemas, so creating an endpoint is the same task as creating a schema.

This library provides a `schema` blueprint to make that task trivial. It accepts the same arguments as ember's built in `model` blueprint, which allows for defining simple types using the command line. Let's create a `todo` schema, which will in turn create a `todo` model, and `todo` endpoints.

```
ember g schema todo text:string done:boolean
```

Now let's edit our schema to add a user relationship:

```
{
  "text": "string",
  "done": "boolean",
  "owner": { "type": "users", "relationship": "belongsTo" }
}
```

We'll need a `todos` table to back our `todo` model, so let's create a migration for our schema:

```
ember g migration todos
```

This will automatically generate the following migration:

```
exports.up = function(knex, Promise) {
  return knex.schema.createTable('todos', table => {
    table.increments()
    table.string('text')
    table.boolean('done')
    table.integer('owner_id')
    table.foreign('owner_id').references('id').inTable('users')
  })
};

exports.down = function(knex, Promise) {
  return knex.schema.dropTable('todos')
};
```

Finally, let's apply our migration by running `knex migrate:latest`, and start our server. Now if you visit [http://localhost:4200/api/todos](http://localhost:4200/api/todos) you'll see that it returns an (empty) list of todos.

#### Complex operations

While the automatic CRUD works for most basic models, it's common to come across use-cases where this naive implementation may be slow or need to be extended.

TODO: operations docs
